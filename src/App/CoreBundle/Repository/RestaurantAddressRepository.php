<?php

namespace App\CoreBundle\Repository;

use App\CoreBundle\Entity\Restaurant;
use App\CoreBundle\Entity\RestaurantAddress;
use App\CoreBundle\Handler\Helpers\RestaurantHelper;
use Doctrine\ORM\EntityRepository;

/**
 * RestaurantAddressRepository.
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class RestaurantAddressRepository extends EntityRepository
{
    /**
     * @param $longitude
     * @param $latitude
     * @param int $limit
     * @return array
     */
    public function closeTo($longitude, $latitude, $limit = 3)
    {
        $restaurants = [];
        foreach ($this->getRawClosestRestaurantAddressesWithRadius($longitude, $latitude) as $restaurantAddressWithRadius) {
            /** @var RestaurantAddress $restaurantAddress */
            $restaurantAddress = $restaurantAddressWithRadius[0];
            $restaurants[] = [
                'distance' => $this->distance($restaurantAddress->getLatitude(), $restaurantAddress->getLongitude(), $latitude, $longitude),
                'restaurant' => $restaurantAddress->getRestaurant(),
            ];
        }
        $count = count($restaurants);

        for ($current = 1; $current < $count; ++$current) {
            $previous = $current - 1;
            $key = $restaurants[$current]['distance'];
            $restaurant = $restaurants[$current];
            while ($previous >= 0 && $restaurants[$previous]['distance'] > $key) {
                $restaurants[$previous + 1] = $restaurants[$previous];
                $restaurants[$previous] = $restaurant;
                $previous = $previous - 1;
            }
        }

        $result = [];
        $count = 0;

        foreach ($restaurants as $aRestaurant) {
            if (++$count > $limit) {
                break;
            }

            /** @var Restaurant $restaurant */
            $restaurant = $aRestaurant['restaurant'];

            $result[] = [
                'id' => $restaurant->getId(),
                'name' => $restaurant->getTitle(),
                'address' => $restaurant->getAddress()->getAddress(),
                'postCode' => $restaurant->getAddress()->getPostCode(),
                'postOffice' => $restaurant->getAddress()->getPostOffice(),
                'isOpen' => true,
                'openingHourString' => RestaurantHelper::getOpeningHourString($restaurant, 'TAKEaway'),
            ];
        }

        return $result;
    }

    /**
     * @param $lat1
     * @param $lon1
     * @param $lat2
     * @param $lon2
     * @param string $unit
     * @return float
     */
    private function distance($lat1, $lon1, $lat2, $lon2, $unit = 'K')
    {
        $theta = $lon1 - $lon2;
        $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
        $dist = acos($dist);
        $dist = rad2deg($dist);
        $miles = $dist * 60 * 1.1515;
        $unit = strtoupper($unit);

        if ($unit == 'K') {
            return ($miles * 1.609344);
        } elseif ($unit == 'N') {
            return ($miles * 0.8684);
        } else {
            return $miles;
        }
    }

    /**
     * @param $longitude
     * @param $latitude
     * @return array
     */
    private function getRawClosestRestaurantAddressesWithRadius($longitude, $latitude)
    {
        $query = $this
            ->createQueryBuilder('ra')
            ->addSelect("(abs(ra.latitude - :latitude) + abs(ra.longitude - :longitude)) as radius")
            ->addOrderBy('radius', 'ASC')
            ->setParameter('longitude', $longitude)
            ->setParameter('latitude', $latitude)
            ->getQuery();

        $restaurantAddressesWithRadius = $query->getResult();

        if ($restaurantAddressesWithRadius[0]['radius'] > 0.5) {
            return [];
        }

        return $restaurantAddressesWithRadius;
    }

    /**
     * @param $longitude
     * @param $latitude
     * @return Restaurant[]
     */
    public function getClosestRestaurants($longitude, $latitude)
    {
        $restaurants = [];

        foreach($this->getRawClosestRestaurantAddressesWithRadius($longitude, $latitude) as $restaurantAddressWithRadius) {
            /** @var RestaurantAddress $address */
            $address = $restaurantAddressWithRadius[0];
            $restaurants[] = $address->getRestaurant();
        }

        return $restaurants;
    }
}
