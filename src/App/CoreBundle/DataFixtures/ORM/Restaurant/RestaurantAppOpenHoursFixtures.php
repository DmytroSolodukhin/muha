<?php

/**
 * @author:     dss <dss@nxc.no>
 *
 * @copyright   Copyright (C) 2015 NXC AS.
 * @date: 27 05 2015
 */
namespace App\CoreBundle\DataFixtures\ORM\Restaurant;

use App\CoreBundle\DataFixtures\ORM\AbstractDollyFixture;
use App\CoreBundle\Entity\Restaurant;
use Doctrine\Common\DataFixtures\AbstractFixture;
use Doctrine\Common\DataFixtures\OrderedFixtureInterface;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerInterface as Container;

/**
 * Class AppOpenHoursFixtures.
 */
class RestaurantAppOpenHoursFixtures extends AbstractDollyFixture
{
    /**
     * @return int
     */
    public function getOrder()
    {
        return 4;
    }

    /**
     * @inheritDoc
     */
    public function load(ObjectManager $manager)
    {
        $restaurantNumber = 0;
        while ($this->hasReference('restaurant-'.$restaurantNumber)) {
            $this->loadFixturesForRestaurant($restaurantNumber++);
        }
        parent::load($manager);
    }

    /**
     * @inheritDoc
     */
    protected function createEntity($data)
    {
        $openHours = $this->getOpenHoursHandler()->createEntity();

        $openHours->setOpeningTime($data['openingTime']);
        $openHours->setClosingTime($data['closingTime']);
        $openHours->setService($data['service']);
        if (isset($data['dayOfWeek'])) {
            $openHours->setDayOfWeek($data['dayOfWeek']);
        }

        $openHours->setRestaurant($this->getReference($data['restaurantReferenceName']));

        if (isset($data['date'])) {
            $openHours->setDate($data['date']);
        }

        return $openHours;
    }

    /**
     * @param $restaurantNumber
     * @return array
     */
    private function loadFixturesForRestaurant($restaurantNumber)
    {
        foreach ($this->getOpenHoursHandler()->getServices() as $service) {
            $this->loadFixturesForRestaurantAndService($restaurantNumber, $service);
        }
    }

    /**
     * @param $restaurantNumber
     * @param $service
     */
    private function loadFixturesForRestaurantAndService($restaurantNumber, $service)
    {
        for ($dayOfWeek = 1; $dayOfWeek <= 7; ++$dayOfWeek) {
            $this->loadFixturesForRestaurantAndServiceAndDayWeekOrDate($restaurantNumber, $service, $dayOfWeek);
        }
        $date = new \DateTime();
        $date->setTimestamp(time()+3600*24);
        $this->loadFixturesForRestaurantAndServiceAndDayWeekOrDate($restaurantNumber, $service, null, $date);
    }

    /**
     * @param $restaurantNumber
     * @param $service
     * @param $dayOfWeek
     * @param \DateTime $date
     * @return array
     */
    private function loadFixturesForRestaurantAndServiceAndDayWeekOrDate($restaurantNumber, $service, $dayOfWeek = null, $date = null)
    {
        $fixture = [];
        
        $fixture['openingTime'] = $this->getStartByDayWeek($dayOfWeek);
        $fixture['closingTime'] = $this->getFinishByDayWeek($dayOfWeek);
        $fixture['service'] = $service;
        
        if (!is_null($dayOfWeek)) {
            $fixture['dayOfWeek'] = $dayOfWeek;
        }

        $fixture['restaurantReferenceName'] = 'restaurant-'.$restaurantNumber;

        if (!is_null($date)) {
            $fixture['date'] = $date;
        }

        if (!is_null($dayOfWeek)) {
            $referenceName = 'rest-' . $restaurantNumber . '-open-hours-' . $service . '-' . $dayOfWeek;
        }

        if (!is_null($date)) {
            $referenceName = 'rest-' . $restaurantNumber . '-open-hours-' . $service . '-' . date('dmY', $date->getTimestamp());
        }

        if (isset($referenceName)) {
            $fixture['referenceName'] = $referenceName;
        }
        
        $this->autoGeneratedFixtures[] = $fixture;
    }

    /**
     * @param $dayOfWeek
     * @return \DateTime
     */
    private function getStartByDayWeek($dayOfWeek)
    {
        $start = new \DateTime();
        $start->setTime(9, 0, 0);
        $startShift = new \DateInterval('PT' . max(0, $dayOfWeek - 5) . 'H');
        $start->add($startShift);
        return $start;
    }

    /**
     * @param $dayOfWeek
     * @return \DateTime
     */
    private function getFinishByDayWeek($dayOfWeek)
    {
        $finish = new \DateTime();
        $finish->setTime(18, 0, 0);
        if ($dayOfWeek == 0) {
            $finish->setTime(23, 0, 0);
        }
        $finishShift = new \DateInterval('PT' . max(0, $dayOfWeek - 4) . 'H');
        $finish->add($finishShift);
        return $finish;
    }

    /**
     * @return \App\CoreBundle\Handler\OpenHoursHandler
     */
    private function getOpenHoursHandler()
    {
        return $this->container->get('app_core.open_hours.handler');
    }
}
