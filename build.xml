<?xml version="1.0" encoding="UTF-8"?>

<project name="Dolly" default="build">
    <property name="workspace" value="${basedir}" />
    <property name="sourcedir" value="${basedir}/src" />
    <property name="builddir" value="${workspace}/app/build" />
    <property name="webdir" value="${workspace}/web" />
    <property name="uploadsdirname" value="uploads" />
    <property name="uploadsdir" value="${webdir}/${uploadsdirname}" />
    <!--<property name="cachedevdir" value="${workspace}/var/cache/dev"/>-->
    <!--<property name="cacheproddir" value="${workspace}/var/cache/prod"/>-->
    <property environment="env"/>
    <property name="app.run-statistic" value="${env.APP_RUN_STATISTIC}"/>
    <property name="app.demo" value="${env.APP_DEMO}"/>

    <echo message="app.demo=[${app.demo}], app.run-statistic=[${app.run-statistic}]" />

    <condition property="run.statistic">
        <istrue value="${app.run-statistic}"/>
    </condition>

    <condition property="app.is.demo">
        <istrue value="${app.demo}"/>
    </condition>

    <target name="build"
            depends="clear_maintenance, maintenance_on, prepare, parameters, vendors_install, vendors_update, clear-cache, update-data-layer, lint, phploc, pdepend, phpcpd, phpmd-ci, phpcs-ci, phpdoc, phpcb, phpmetrics, maintenance_off, phpunit"/>

    <target name="build-parallel" depends="prepare, lint, tools-parallel, phpunit, phpcb"/>

    <!-- Update the data layer -->
    <!--<target name="update-data-layer" depends="migrate, clear-apc"/>-->
    <target name="update-data-layer" depends="migrate, load-fixtures"/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpdoc"/>
        </parallel>
    </target>

    <target name="migrate" description="Use doctrine migration to update changes in the database schema">
        <exec executable="/opt/php-5.6/bin/php" dir="${basedir}" failonerror="true">
            <arg line="app/console doctrine:migrations:migrate --no-interaction"/>
        </exec>
    </target>

    <target name="load-fixtures" description="Load fixtures into DB" depends="migrate" unless="app.is.demo">
        <exec executable="/opt/php-5.6/bin/php" dir="${basedir}" failonerror="true">
            <arg line="app/console doctrine:fixtures:load --no-interaction"/>
        </exec>
    </target>

    <target name="clear-apc" description="Clear the apc cache">
        <exec executable="/opt/php-5.6/bin/php" dir="${basedir}" failonerror="false">
            <arg line="app/console apc:clear"/>
        </exec>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${builddir}/api"/>
        <delete dir="${builddir}/code-browser"/>
        <delete dir="${builddir}/coverage"/>
        <delete dir="${builddir}/logs"/>
        <delete dir="${builddir}/pdepend"/>
        <delete dir="${builddir}/phpmetrics"/>
        <delete dir="${builddir}/docs/*"/>
        <!--<delete dir="${cacheproddir}/*"/>-->
        <!--<delete dir="${cacheproddir}/*"/>-->
    </target>

    <target name="update-folder-permissions" description="Target to update permissions on folders">
        <exec executable="www-chown" dir="${webdir}" failonerror="true">
            <arg line="-Rq ${uploadsdirname}"/>
        </exec>
    </target>

    <!-- Create new logs and cache folders -->
    <target name="create-folders" depends="clean" description="Prepare for build, create some folders">
        <mkdir dir="${basedir}/var"/>
        <mkdir dir="${basedir}/var/cache"/>
        <mkdir dir="${basedir}/var/logs"/>

        <mkdir dir="${uploadsdir}"/>

        <mkdir dir="${builddir}/api"/>
        <mkdir dir="${builddir}/code-browser"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
        <mkdir dir="${builddir}/phpmetrics"/>
    </target>

    <!-- Prepare for build -->
    <!--<target name="prepare" depends="create-folders,purge-cache"/>-->
    <target name="prepare" depends="create-folders, update-folder-permissions"/>

    <target name="purge-cache" description="Removes cache with force">
        <delete includeEmptyDirs="true">
            <fileset dir="${basedir}/var/cache" includes="**/*"/>
        </delete>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files" if="run.statistic">
        <apply executable="/opt/php-5.6/bin/php" failonerror="true">
            <arg value="-l" />
            <fileset dir="${sourcedir}">
                <include name="**/*.php" />
                <modified />
            </fileset>
            <fileset dir="${basedir}/src/">
                <include name="**/*Test.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC" if="run.statistic">
        <exec executable="phploc">
            <arg value="--log-csv" />
            <arg value="${builddir}/logs/phploc.csv" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend" if="run.statistic">
        <exec executable="/opt/php-5.6/bin/pdepend">
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing." if="run.statistic">
        <exec executable="/opt/php-5.6/bin/phpmd">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg value="${workspace}/app/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server" if="run.statistic">
        <exec executable="/opt/php-5.6/bin/phpmd">
            <arg path="${sourcedir}" />
            <arg value="xml" />
            <arg value="${workspace}/app/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${builddir}/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing." if="run.statistic">
        <exec executable="/opt/php-5.6/bin/phpcs">
            <arg value="--standard=Symfony2" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server" if="run.statistic">
        <!--<exec executable="phpcs" output="/dev/null">-->
        <exec executable="/opt/php-5.6/bin/phpcs">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${builddir}/logs/checkstyle.xml" />
            <arg value="--standard=Symfony2" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD" if="run.statistic">
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg value="${builddir}/logs/pmd-cpd.xml" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpdoc" description="Generate API documentation using phpDoc" if="run.statistic">
        <exec executable="phpdoc">
            <arg line="-n -d -q '${sourcedir}' --template='clean' -t '${builddir}/docs' --title='Dolly' --ignore='Tests/*,*.yml,*.xml' --ignore-symlinks" />
        </exec>
    </target>

    <target name="phpmetrics" description="Generate files for phpmetrics" if="run.statistic">
        <exec executable="/opt/php-5.6/bin/php">
            <arg line="/var/lib/jenkins/.composer/vendor/bin/phpmetrics --report-html=${builddir}/phpmetrics/phpmetrics.html --report-xml=${builddir}/phpmetrics/phpmetrics.xml --violations-xml=${builddir}/phpmetrics/violations.xml ${sourcedir}" />
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit" if="run.statistic">
        <exec executable="phpunit" failonerror="false">
            <arg value="-c" />
            <arg path="${basedir}/app/phpunit.xml" />
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser" if="run.statistic">
        <exec executable="phpcb">
            <arg value="--log" />
            <arg path="${builddir}/logs" />
            <arg value="--source" />
            <arg path="${sourcedir}" />
            <arg value="--output" />
            <arg path="${builddir}/code-browser" />
        </exec>
    </target>

    <target name="check-composer-lock">
        <available file="${basedir}/composer.lock" property="composer.lock.present"/>
    </target>

    <target name="vendors_install" description="Install vendors" depends="check-composer-lock" unless="composer.lock.present">
        <exec executable="composer" failonerror="true">
            <arg value="install"/>
            <arg value="-o"/>
            <arg value="--working-dir"/>
            <arg path="${basedir}"/>
        </exec>
    </target>

    <target name="vendors_update" description="Update vendors" depends="check-composer-lock" if="composer.lock.present">
        <exec executable="composer" failonerror="true">
            <arg value="update"/>
            <arg value="-o"/>
            <arg value="--working-dir"/>
            <arg path="${basedir}"/>
        </exec>
    </target>

    <target name="clear-cache" description="Clear all the caches">
        <exec executable="/opt/php-5.6/bin/php" dir="${basedir}" failonerror="true">
            <arg line="app/console cache:clear --env=prod --no-debug"/>
        </exec>
        <exec executable="www-chown" dir="${basedir}" failonerror="true">
            <arg line="-Rq var"/>
        </exec>
        <exec executable="/opt/php-5.6/bin/php" dir="${basedir}" failonerror="true">
            <arg line="app/console akuma:bootswatch:install --env=prod --no-debug"/>
        </exec>
        <exec executable="/opt/php-5.6/bin/php" dir="${basedir}" failonerror="true">
            <arg line="app/console app:dolly:install --env=prod --no-debug"/>
        </exec>
        <exec executable="/opt/php-5.6/bin/php" dir="${basedir}" failonerror="true">
            <arg line="app/console assets:install --symlink --env=prod --no-debug"/>
        </exec>
        <exec executable="/opt/php-5.6/bin/php" dir="${basedir}" failonerror="true">
            <arg line="app/console assetic:dump --env=prod --no-debug"/>
        </exec>
    </target>

    <target name="parameters" description="Copy parameters">
        <exec executable="cp" failonerror="true">
            <arg path="app/config/parameters.yml.dist" />
            <arg path="app/config/parameters.yml" />
        </exec>
    </target>

    <target name="maintenance_on" description="Put the site in maintenance mode">
        <move file="${basedir}/web/app.php" tofile="${basedir}/web/app.php.bak" failonerror="true"/>
        <copy file="${basedir}/web/maintenance.php" tofile="${basedir}/web/app.php" failonerror="true"/>
    </target>

    <target name="check-app-php-bak">
        <available file="${basedir}/web/app.php.bak" property="app.php.bak.present"/>
    </target>

    <target name="clear_maintenance" description="Turn off maintenance mode on start build process" depends="check-app-php-bak" if="app.php.bak.present">
        <delete file="${basedir}/web/app.php" failonerror="true"/>
        <move file="${basedir}/web/app.php.bak" tofile="${basedir}/web/app.php" failonerror="true"/>
    </target>

    <target name="maintenance_off" description="Turn off maintenance mode on end">
        <delete file="${basedir}/web/app.php" failonerror="true"/>
        <move file="${basedir}/web/app.php.bak" tofile="${basedir}/web/app.php" failonerror="true"/>
    </target>

</project>