jms_security_extra:
    secure_all_services: false
    expressions: true

security:
    # http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password
    encoders:
        FOS\UserBundle\Model\UserInterface: sha512

    # http://symfony.com/doc/current/book/security.html#hierarchical-roles
    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER,  ROLE_API, ROLE_ADMIN, ROLE_CC, ROLE_MARKET]
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]


    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        fos_userbundle:
            id:  fos_user.user_provider.username
        userbundle:
            id:  app_core.customer_security_provider

    # the main part of the security, where you can set up firewalls
    # for specific sections of your app
    firewalls:
        back_office_firewall:
            context: back_office
            pattern: ^/(backoffice|api/doc|ccws)
            form_login:
                check_path: /backoffice/login_check
                login_path: /backoffice/login_db # todo chenge to login
                provider: fos_userbundle
                csrf_provider: security.csrf.token_manager # Use form.csrf_provider instead for Symfony <2.4
            logout:
                path:   /backoffice/logout
                target: /backoffice/
                invalidate_session: false
            anonymous: ~

        secured_area:
            context: customer
            anonymous: ~
            oauth:
                resource_owners:
                    facebook:      "/login/check-facebook"
                login_path:        /login
                failure_path:      /login
                oauth_user_provider:
                    service:  app_core.customer_security_provider
            form_login:
                provider: fos_userbundle
                csrf_provider: form.csrf_provider
                login_path: /login
                check_path: /login_check
            logout:
                path:   /logout
                target: /
                invalidate_session: false

        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # the login page has to be accessible for everybody
#        demo_login:
#            pattern:  ^/demo/secured/login$
#            security: false

        # secures part of the application
#        demo_secured_area:
#            pattern:    ^/demo/secured/
#            # it's important to notice that in this case _demo_security_check and _demo_login
#            # are route names and that they are specified in the AcmeDemoBundle
#            form_login:
#                check_path: _demo_security_check
#                login_path: _demo_login
#            logout:
#                path:   _demo_logout
#                target: _demo
            #anonymous: ~
            #http_basic:
            #    realm: "Secured Demo Area"

    # with these settings you can restrict or allow access for different parts
    # of your application based on roles, ip, host or methods
    # http://symfony.com/doc/current/cookbook/security/access_control.html
    access_control:
        - { path: ^/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/backoffice/login_db$, role: IS_AUTHENTICATED_ANONYMOUSLY } #todo remove
        - { path: ^/backoffice/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/backoffice, role: %ROLE_FROM_ALL_ADMIN% }
        - { path: ^/backoffice/settings, role: ROLE_ADMIN }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/*, roles: ROLE_API }
        - { path: ^/connect, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: /.*, role: IS_AUTHENTICATED_ANONYMOUSLY }
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }